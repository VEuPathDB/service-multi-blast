package mb.lib.query;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import mb.api.model.io.JsonKeys;
import org.veupathdb.lib.blast.consts.Flag;

class Field2Flag
{
  public static final Map<String, String> Flag2Field = Collections.unmodifiableMap(new HashMap<>()
  {{
    put(Flag.BestHitOverhang, JsonKeys.BestHitOverhang);
    put(Flag.BestHitScoreEdge, JsonKeys.BestHitScoreEdge);
    put(Flag.CompBasedStats, JsonKeys.CompositionBasedStats);
    put(Flag.CullingLimit, JsonKeys.CullingLimit);
    put(Flag.DBGenCode, JsonKeys.DBGeneticCode);
    put(Flag.DBHardMask, JsonKeys.DBHardMask);
    put(Flag.DBSize, JsonKeys.DBSize);
    put(Flag.DBSoftMask, JsonKeys.DBSoftMask);
    put(Flag.Dust, JsonKeys.Dust);
    put(Flag.EntrezQuery, JsonKeys.EntrezQuery);
    put(Flag.ExpectValue, JsonKeys.ExpectValue);
    put(Flag.ExportSearchStrategy, JsonKeys.ExportSearchStrategy);
    put(Flag.ExtensionDropoffUngapped, JsonKeys.XDropUngap);
    put(Flag.ExtensionDropoffPrelimGapped, JsonKeys.XDropGap);
    put(Flag.ExtensionDropoffFinalGapped, JsonKeys.XDropGapFinal);
    put(Flag.FilteringDB, JsonKeys.FilteringDB);
    put(Flag.GIList, JsonKeys.GIList);
    put(Flag.GapExtend, JsonKeys.GapExtend);
    put(Flag.GapOpen, JsonKeys.GapOpen);
    put(Flag.HTML, JsonKeys.HTML);
    put(Flag.IPGList, JsonKeys.IPGList);
    put(Flag.ImportSearchStrategy, JsonKeys.ImportSearchStrategy);
    put(Flag.InMSAFile, JsonKeys.InputMultiSequenceAlignment);
    put(Flag.InPSSMFile, JsonKeys.InputPsiBlastCheckpointFile);
    put(Flag.InclusionEThreshold, JsonKeys.InclusionEValueThreshold);
    put(Flag.IndexName, JsonKeys.IndexName);
    put(Flag.LineLength, JsonKeys.LineLength);
    put(Flag.LongHelp, JsonKeys.LongHelp);
    put(Flag.LowercaseMasking, JsonKeys.LowercaseMasking);
    put(Flag.MSAMasterIDX, JsonKeys.MultiSequenceAlignmentMasterIndex);
    put(Flag.Matrix, JsonKeys.Matrix);
    put(Flag.MaxHSPs, JsonKeys.MaxHSPs);
    put(Flag.MaxIntronLength, JsonKeys.MaxIntronLength);
    put(Flag.MaxTargetSequences, JsonKeys.MaxTargetSequences);
    put(Flag.MinRawGappedScore, JsonKeys.MinRawGappedScore);
    put(Flag.NegativeGIList, JsonKeys.NegativeGIList);
    put(Flag.NegativeIPGList, JsonKeys.NegativeIPGList);
    put(Flag.NegativeSequenceIDList, JsonKeys.NegativeSeqIDList);
    put(Flag.NegativeTaxIDList, JsonKeys.NegativeTaxIDList);
    put(Flag.NegativeTaxIDs, JsonKeys.NegativeTaxIDs);
    put(Flag.NonGreedy, JsonKeys.NonGreedy);
    put(Flag.NumAlignments, JsonKeys.NumAlignments);
    put(Flag.NumDescriptions, JsonKeys.NumDescriptions);
    put(Flag.NumIterations, JsonKeys.NumIterations);
    put(Flag.NumThreads, JsonKeys.NumThreads);
    put(Flag.OffDiagonalRange, JsonKeys.OffDiagonalRange);
    put(Flag.OutASCIIPSSMFile, JsonKeys.OutAsciiPsiBlastCheckpointFile);
    put(Flag.OutFormat, JsonKeys.OutFormat);
    put(Flag.OutPSSMFile, JsonKeys.OutPsiBlastCheckpointFile);
    put(Flag.ParseDefLines, JsonKeys.ParseDefLines);
    put(Flag.Penalty, JsonKeys.Penalty);
    put(Flag.PercentIdentity, JsonKeys.PercentIdentity);
    put(Flag.PhiPatternFile, JsonKeys.PhiBlastPatternFile);
    put(Flag.QueryCoverageHSPPercent, JsonKeys.QueryCoverageHSPPercent);
    put(Flag.QueryFile, JsonKeys.Query);
    put(Flag.QueryGenCode, JsonKeys.QueryGeneticCode);
    put(Flag.QueryLocation, JsonKeys.QueryLocation);
    put(Flag.Remote, JsonKeys.Remote);
    put(Flag.Reward, JsonKeys.Reward);
    put(Flag.SaveEachPSSM, JsonKeys.SaveEachPsiBlastCheckpoint);
    put(Flag.SavePSSMAfterLastRound, JsonKeys.SavePsiBlastCheckpointAfterLastRound);
    put(Flag.SearchSpace, JsonKeys.SearchSpace);
    put(Flag.Seg, JsonKeys.Seg);
    put(Flag.SequenceIDList, JsonKeys.SeqIDList);
    put(Flag.ShortHelp, JsonKeys.ShortHelp);
    put(Flag.ShowGIs, JsonKeys.ShowNCBIGIs);
    put(Flag.SoftMasking, JsonKeys.SoftMasking);
    put(Flag.SortHSPs, JsonKeys.SortHSPs);
    put(Flag.SortHits, JsonKeys.SortHits);
    put(Flag.Strand, JsonKeys.Strand);
    put(Flag.SubjectBestHit, JsonKeys.SubjectBestHit);
    put(Flag.SubjectFile, JsonKeys.Subject);
    put(Flag.SubjectLocation, JsonKeys.SubjectLocation);
    put(Flag.SumStats, JsonKeys.SumStats);
    put(Flag.Task, JsonKeys.Task);
    put(Flag.TaxIDList, JsonKeys.TaxIDList);
    put(Flag.TaxIDs, JsonKeys.TaxIDs);
    put(Flag.TemplateLength, JsonKeys.TemplateLength);
    put(Flag.TemplateType, JsonKeys.TemplateType);
    put(Flag.Threshold, JsonKeys.Threshold);
    put(Flag.UngappedAlignmentsOnly, JsonKeys.Ungapped);
    put(Flag.UseIndex, JsonKeys.UseIndex);
    put(Flag.UseSmithWatermanTraceback, JsonKeys.UseSmithWatermanAligns);
    put(Flag.Version, JsonKeys.Version);
    put(Flag.WindowMaskerDB, JsonKeys.WindowMaskerDB);
    put(Flag.WindowMaskerTaxID, JsonKeys.WindowMaskerTaxID);
    put(Flag.WindowSize, JsonKeys.MultiHitWindowSize);
    put(Flag.WordSize, JsonKeys.WordSize);
  }});
}
