#%RAML 1.0 DataType

uses:
  blast: ../blast/index.raml
  ext: index.raml
  com: ../blast-common/index.raml

type: blast.InputBlastConfig
additionalProperties: false
discriminator: tool

properties:

  # Input query options

  strand?:
    displayName: -strand=<string, `both|minus|plus`>
    description: |
      Query strand(s) to search against database/subject. Choice of both, minus,
      or plus.

      Applies to task(s): all

      Default value: `both`
    type: com.InputBlastStrand

  # General search options

  task?:
    displayName: -task=<string>
    description: |
      Default value: `blastn`
    type: ext.InputBlastnTask

  wordSize?:
    displayName: -word_size=<integer, >=4>
    type: integer
    minimum: 4

    description: |
      Word size for wordfinder algorithm (length of best perfect match).

      Default value by task:

      | Task           | Value | Notes                          |
      |----------------|-------|--------------------------------|
      | `megablast`    | 28    | Length of initial exact match. |
      | `dc-megablast` | 11    | Number of matching nucleotides in initial match. dc-megablast allows non-consecutive letters to match. |
      | `blastn`       | 11    | Length of initial exact match. |
      | `blastn-short` | 7     | Length of initial exact match. |

      Applies to task(s): all

  gapOpen?:
    displayName: -gapopen=<integer>
    type: integer
    description: |
      Cost to open a gap. See appendix “BLASTN reward/penalty values” in the
      NCBI blast docs.

      Default value by task:

      | Task           | Value |
      |----------------|-------|
      | `megablast`    | 0     |
      | `dc-megablast` | 5     |
      | `blastn`       | 5     |
      | `blastn-short` | 5     |

      Applies to task(s): all

  gapExtend?:
    displayName: -gapextend=<integer>
    type: integer
    description: |
      Cost to extend a gap. This default is a function of reward/penalty value.
      See appendix “BLASTN reward/penalty values” in the NCBI blast docs.

      Default value by task:

      | Task           | Value | Notes                                               |
      |----------------|-------|-----------------------------------------------------|
      | `megablast`    | *     | This default is a function of reward/penalty value. |
      | `dc-megablast` | 2     |                                                     |
      | `blastn`       | 2     |                                                     |
      | `blastn-short` | 2     |                                                     |

      Applies to task(s): all

  penalty?:
    displayName: -penalty=<integer, <=0>
    type: integer
    maximum: 0
    description: |
      Penalty for a nucleotide mismatch.

      Default value by task:

      | Task           | Value |
      |----------------|-------|
      | `megablast`    | -2    |
      | `dc-megablast` | -3    |
      | `blastn`       | -3    |
      | `blastn-short` | -3    |

      Applies to task(s): all

  reward?:
    displayName: -reward=<integer, >=0>
    type: integer
    minimum: 0
    description: |
      Reward for a nucleotide match.

      Default value by task:

      | Task           | Value |
      |----------------|-------|
      | `megablast`    | 1     |
      | `dc-megablast` | 2     |
      | `blastn`       | 2     |
      | `blastn-short` | 1     |

      Applies to task(s): all

  useIndex?:
    displayName: -use_index=<boolean>
    type: boolean
    description: |
      Use MegaBLAST database index

      Default = `false`

  indexName?:
    displayName: -index_name=<string>
    type: string
    description: |
      MegaBLAST database index name (deprecated; use only for old style indices)

  # BLAST-2-Sequences options

  # subject?:
  #   type: file
  #   description: |
  #     Subject sequence(s) to search

  #     Incompatible with:

  #     * db
  #     * giList
  #     * seqIdList
  #     * negativeGiList
  #     * negativeSeqIdList
  #     * taxIds
  #     * taxIdList
  #     * negativeTaxIds
  #     * negativeTaxIdList
  #     * dbSoftMask
  #     * dbHardMask

  subjectLoc?:
    displayName: -subject_loc=<string, range>
    type: blast.InputBlastLocation
    description: |
      Location on the subject sequence in 1-based offsets

      Incompatible with:

      * db
      * giList
      * seqIdList
      * negativeGiList
      * negativeSeqIdList
      * taxIds
      * taxIdList
      * negativeTaxIds
      * negativeTaxIdList
      * dbSoftMask
      * dbHardMask
      * remote

  # Query filtering options

  dust?:
    displayName: -dust=<string, dust>
    description: |
      Filter query sequence with dust.

      Applies to task(s): all
    type: ext.InputBlastnDust

  # filteringDb?:
  #   displayName: -filtering_db=<string, dir_name>
  #   type: string
  #     Mask query using the sequences in this database.

  #     Applies to task(s): all

  windowMaskerTaxid?:
    displayName: -window_masker_taxid=<integer>
    type: integer
    description: |
      Enable WindowMasker filtering using a Taxonomic ID.

      Applies to task(s): all

  # windowMaskerDb?:
  #   displayName: -window_masker_db=<string, filename>
  #   type: file
  #   description: |
  #     Enable WindowMasker filtering using this repeats database.

  #     Applies to task(s): all

  softMasking?:
    displayName: -soft_masking=<boolean>
    type: boolean
    description: |
      Apply filtering locations as soft masks (i.e., only for finding initial
      matches).

      Applies to task(s): all

      Default = `true`

  # Restrict search or results

  # giList?:
  #   displayName: -gilist=<string, filename>
  #   type: file
  #   description: |
  #     Restrict search of database to list of GIs

  #     Incompatible with:

  #     * seqIdList
  #     * taxIds
  #     * taxIdList
  #     * negativeGiList
  #     * negativeSeqIdList
  #     * negativeTaxIds
  #     * negativeTaxIdList
  #     * remote
  #     * subject
  #     * subjectLoc

  # seqIdList?:
  #   displayName: -seqidlist=<string, filename>
  #   type: file
  #   description: |
  #     Restrict search of database to list of SeqIDs

  #     Incompatible with:

  #     * giList
  #     * taxIds
  #     * taxIdList
  #     * negativeGiList
  #     * negativeSeqIdList
  #     * negativeTaxIds
  #     * negativeTaxIdList
  #     * remote
  #     * subject
  #     * subjectLoc

  # negativeGiList?:
  #   displayName: negative_gilist=<string, filename>
  #   type: file
  #   description: |
  #     Restrict search of database to everything except the specified GIs

  #     Incompatible with:

  #     * giList
  #     * seqIdList
  #     * taxIds
  #     * taxIdList
  #     * negativeSeqIdList
  #     * negativeTaxIds
  #     * negativeTaxIdList
  #     * remote
  #     * subject
  #     * subjectLoc

  # negativeSeqIdList?:
  #   displayName: negative_seqidlist=<string, filename>
  #   type: file
  #   description: |
  #     Restrict search of database to everything except the specified SeqIDs

  #     Incompatible with:

  #     * giList
  #     * seqIdList
  #     * taxIds
  #     * taxIdList
  #     * negativeGiList
  #     * negativeTaxIds
  #     * negativeTaxIdList
  #     * remote
  #     * subject
  #     * subjectLoc

  taxIds?:
    displayName: -taxids=<string>
    type: string[]
    description: |
      Restrict search of database to include only the specified taxonomy IDs

      Incompatible with:

      * giList
      * seqIdList
      * taxIdList
      * negativeGiList
      * negativeSeqIdList
      * negativeTaxIds
      * negativeTaxIdList
      * remote
      * subject
      * subjectLoc

  negativeTaxIds?:
    displayName: -negative_taxids=<string>
    type: string[]
    description: |
      Restrict search of database to everything except the specified taxonomy IDs

      Incompatible with:

      * giList
      * seqIdList
      * taxIds
      * taxIdList
      * negativeGiList
      * negativeSeqIdList
      * negativeTaxIdList
      * remote
      * subject
      * subjectLoc

  # taxIdList?:
  #   displayName: taxidlist=<string, filename>
  #   type: file
  #   description: |
  #     Restrict search of database to include only the specified taxonomy IDs

  #     Incompatible with:

  #     * giList
  #     * seqIdList
  #     * taxIds
  #     * negativeGiList
  #     * negativeSeqIdList
  #     * negativeTaxIds
  #     * negativeTaxIdList
  #     * remote
  #     * subject
  #     * subjectLoc

  # negativeTaxIdList?:
  #   displayName: negative_taxidlist=<string, filename>
  #   type: file
  #   description: |
  #     Restrict search of database to everything except the specified taxonomy IDs

  #     Incompatible with:

  #     * giList
  #     * seqIdList
  #     * taxIds
  #     * taxIdList
  #     * negativeGiList
  #     * negativeSeqIdList
  #     * negativeTaxIds
  #     * remote
  #     * subject
  #     * subjectLoc

  # entrezQuery?:
  #   displayName: -entrez_query=<string>
  #   type: string
  #   description: |

  #     Restrict search with the given Entrez query

  #     Requires: remote

  dbSoftMask?:
    displayName: -db_soft_mask=<string>
    type: string
    description: |
      Filtering algorithm ID to apply to the BLAST database as soft mask (i.e.,
      only for finding initial matches).

      Applies to task(s): all

      Incompatible with:

      * dbHardMask
      * subject
      * subjectLoc

  dbHardMask?:
    displayName: -db_hard_mask=<string>
    type: string
    description: |
      Filtering algorithm ID to apply to the BLAST database as hard mask (i.e.,
      sequence is masked for all phases of search).

      Applies to task(s): all

      Incompatible with:

      * dbSoftMask
      * subject
      * subjectLoc

  percIdentity?:
    displayName: "-perc_identity=<real, 0..100>"
    type: number
    format: double
    minimum: 0.0
    maximum: 100.0
    description: |
      Percent identity cutoff.

      Applies to task(s): all

  cullingLimit?:
    displayName: -culling_limit=<integer, >=0>
    type: integer
    minimum: 0
    description: |
      If the query range of a hit is enveloped by that of at least this many
      higher-scoring hits, delete the hit

      Incompatible with:

      * bestHitOverhang
      * bestHitScoreEdge

  bestHitOverhang?:
    displayName: -best_hit_overhang=<real, (>0 and <0.5)>
    type: number
    format: double
    minimum: 0.0
    maximum: 0.5
    description: |
      Best Hit algorithm overhang value (recommended value: 0.1)

      Incompatible with: `cullingLimit`

  bestHitScoreEdge?:
    displayName: -best_hit_score_edge=<real, (>0 and <0.5)>
    type: number
    format: double
    minimum: 0.0
    maximum: 0.5
    description: |
      Best Hit algorithm score edge value (recommended value: 0.1)

      Incompatible with: `cullingLimit`

  subjectBesthit?:
    displayName: -subject_besthit
    type: boolean
    description: "Turn on best hit per subject sequence"

  # Discontiguous MegaBLAST options

  templateType?:
    displayName: -template_type=<string, `coding|codingAndOptimal|optimal`>
    type: ext.InputBlastnDcTemplateType
    description: |
      Discontiguous MegaBLAST template type.

      Applies to task(s): dc-megablast

      Default value: `coding`

      Requires: `templateLength`

  templateLength?:
    displayName: -template_length=<integer, `16|18|21` >
    type: integer
    format: int8
    minimum: 16
    maximum: 21
    description: |
      Discontiguous MegaBLAST template length.

      Value must be one of `16`, `18`, or `21`

      Applies to task(s): dc-megablast

      Requires: `templateType`

      Default: `18`

  # Statistical options

  sumStats?:
    displayName: -sum_stats=<boolean>
    type: boolean
    description: "Use sum statistics"

  # Extension options

  xDropGap?:
    displayName: -xdrop_gap=<real>
    type: number
    format: double
    description: |
      X-dropoff value (in bits) for preliminary gapped extensions

      Default: `30.0`

  xDropGapFinal?:
    displayName: -xdrop_gap_final=<real>
    type: number
    format: double
    description: |
      X-dropoff value (in bits) for final gapped alignment

      Dfault: `100.0`

  noGreedy?:
    displayName: -no_greedy
    type: boolean
    description: |
      Use non-greedy dynamic programming extension.

      Applies to task(s): megablast

  minRawGappedScore?:
    displayName: -min_raw_gapped_score=<integer>
    type: integer
    description: |
      Minimum raw gapped score to keep an alignment in the preliminary gapped
      and trace-back stages. Normally set based upon expect value.

      Applies to task(s): all

  ungapped?:
    displayName: -ungapped
    type: boolean
    description: |
      Perform ungapped alignment only.

      Applies to task(s): all

  windowSize?:
    displayName: -window_size=<integer, >=0>
    type: integer
    minimum: 0
    description: |
      Multiple hits window size, use 0 to specify 1-hit algorithm

      Applies to task(s): dc-megablast

      Default: `40`

  offDiagonalRange?:
    displayName: -off_diagonal_range=<integer, >=0>
    type: integer
    minimum: 0
    description: |
      Number of off-diagonals to search for the 2nd hit, use 0 to turn off

      Default = `0`
