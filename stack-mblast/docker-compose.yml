version: "3.5"

name: mblast

volumes:
  vol-queue-db:
  gcloud-config:

networks:
  internal:
    internal: true
  traefik:
    external: true
  monitoring-ext:
    external: true

services:

  queue-db:
    image: veupathdb/mblast-queue-db:${MBLAST_QUEUE_DB_TAG:-latest}
    environment:
      POSTGRES_USER:     ${POSTGRES_ROOT_USER:?}
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASS:?}

      QUERY_SERVICE_PG_USER:    ${QUERY_SERVICE_PG_USER:?}
      QUERY_SERVICE_PG_PASS:    ${QUERY_SERVICE_PG_PASS:?}
      QUERY_SERVICE_PG_DB_NAME: ${QUERY_SERVICE_PG_DB_NAME:?}

      REPORT_SERVICE_PG_USER:    ${REPORT_SERVICE_PG_USER:?}
      REPORT_SERVICE_PG_PASS:    ${REPORT_SERVICE_PG_PASS:?}
      REPORT_SERVICE_PG_DB_NAME: ${REPORT_SERVICE_PG_DB_NAME:?}
    networks:
    - internal
    volumes:
    - type: volume
      source: vol-queue-db
      target: /var/lib/postgresql/data
    labels:
    - "prometheus.scrape_enabled=false"
    - "com.centurylinklabs.watchtower.enable=${POSTGRES_WATCHTOWER:-false}"
    - "traefik.enable=false"


  queue:
    image: rabbitmq:3.10.7-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_ROOT_USER:?}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_ROOT_PASS:?}
    networks:
    - internal
    labels:
    - "prometheus.scrape_enabled=false"
    - "com.centurylinklabs.watchtower.enable=false"
    - "traefik.enable=false"


  query-service:
    image: veupathdb/mblast-query-service:${MBLAST_QUERY_SERVICE_TAG:-latest}
    depends_on:
    - queue
    - queue-db
    volumes:
    - type: bind
      source: ${BLAST_DB_MOUNT_SOURCE:-../blastdb}
      target: ${BLAST_DB_MOUNT_TARGET:-/blastdb}
    # because the ncbi/blast container is based on gcloud-sdk it creates a
    # volume in /root/.confg.  We don't care about this, we configure a
    # volume so that it is at least tied to the project, instead of a hash.
    - type: volume
      source: gcloud-config
      target: /root/.config
      read_only: true
    environment:
      JVM_MEM_ARGS: ${QUERY_SERVICE_JVM_MEM_ARGS:--Xms32M -Xmx256M}
      JVM_ARGS:     ${QUERY_SERVICE_JVM_ARGS:-}

      AUTH_SECRET_KEY: ${AUTH_SECRET_KEY:?}
      ADMIN_AUTH_KEY: ${ADMIN_AUTH_KEY:?}
      LDAP_SERVER:     ${LDAP_SERVERS:?}
      ORACLE_BASE_DN:  ${ORACLE_BASE_DN:?}

      SERVER_PORT: ${QUERY_SERVER_PORT:-80}

      ACCT_DB_TNS_NAME:  ${ACCT_DB_TNS_NAME:?}
      ACCT_DB_USER:      ${ACCT_DB_USER:?}
      ACCT_DB_PASS:      ${ACCT_DB_PASS:?}
      ACCT_DB_POOL_SIZE: ${ACCT_DB_POOL_SIZE:-5}

      USER_DB_TNS_NAME:  ${USER_DB_TNS_NAME:?}
      USER_DB_USER:      ${USER_DB_USER:?}
      USER_DB_PASS:      ${USER_DB_PASS:?}
      USER_DB_POOL_SIZE: ${USER_DB_POOL_SIZE:-5}

      QUEUE_DB_HOST:      queue-db
      QUEUE_DB_NAME:      ${QUERY_SERVICE_PG_DB_NAME:?}
      QUEUE_DB_PORT:      ${POSTGRES_PORT:-5432}
      QUEUE_DB_USERNAME:  ${QUERY_SERVICE_PG_USER:?}
      QUEUE_DB_PASSWORD:  ${QUERY_SERVICE_PG_PASS:?}
      QUEUE_DB_POOL_SIZE: ${QUERY_SERVICE_PG_POOL_SIZE:-10}

      JOB_QUEUE_HOST:     queue
      JOB_QUEUE_USERNAME: ${RABBITMQ_ROOT_USER:?}
      JOB_QUEUE_PASSWORD: ${RABBITMQ_ROOT_PASS:?}
      JOB_QUEUE_PORT:     ${RABBITMQ_PORT:-5672}

      S3_HOST:         ${S3_HOST:?}
      S3_BUCKET:       ${QUERY_SERVICE_S3_BUCKET:?}
      S3_ACCESS_TOKEN: ${S3_ACCESS_TOKEN:?}
      S3_SECRET_KEY:   ${S3_SECRET_KEY:?}
      S3_PORT:         ${S3_PORT:-9000}
      S3_USE_HTTPS:    ${S3_USE_HTTPS:-false}

      JOB_CACHE_TIMEOUT_DAYS: ${JOB_CACHE_TIMEOUT_DAYS:-30}

      SITE_BUILD_DIR: ${SITE_BUILD_DIR:?}

      MAX_SEQUENCES_PER_JOB:   ${MAX_QUERIES_PER_JOB:-100}
      MAX_RESULTS_PER_QUERY: ${MAX_RESULTS_PER_QUERY:-10000}
      MAX_INPUT_QUERY_SIZE:  ${MAX_INPUT_QUERY_SIZE:-3145728}
      MAX_NA_SEQ_SIZE:       ${MAX_NA_SEQ_SIZE:-1048576}
      MAX_AA_SEQ_SIZE:       ${MAX_AA_SEQ_SIZE:-102400}

      JOB_QUEUE_1_WORKERS:  ${QUERY_SERVICE_QUEUE_1_POOL_SIZE:-2}
      JOB_QUEUE_1_NAME:     ${QUERY_SERVICE_QUEUE_1_NAME:-primary-queries}

      JOB_QUEUE_2_WORKERS: ${QUERY_SERVICE_QUEUE_2_POOL_SIZE:-10}
      JOB_QUEUE_2_NAME:    ${QUERY_SERVICE_QUEUE_2_NAME:-secondary-queries}

      BLAST_DB_ROOT_DIR: ${BLAST_DB_MOUNT_TARGET:-/blastdb}
    networks:
    - internal
    - traefik
    - monitoring-ext
    labels:
    - "prometheus.scrape_enabled=true"
    - "com.centurylinklabs.watchtower.enable=${QUERY_SERVICE_WATCHTOWER:-false}"
    - "traefik.http.services.${TRAEFIK_QUERY_ROUTER:-mblast-query-dev}.loadbalancer.server.port=${QUERY_SERVER_PORT:-80}"
    - "traefik.http.routers.${TRAEFIK_QUERY_ROUTER:-mblast-query-dev}.rule=Host(`${TRAEFIK_MBLAST_HOST:-mblast.local.apidb.org}`) && PathPrefix(`/query`)"
    - "traefik.http.middlewares.strip-query.stripprefix.prefixes=/query"
    - "traefik.http.routers.${TRAEFIK_QUERY_ROUTER:-mblast-query-dev}.tls=${TRAEFIK_USE_TLS:-true}"
    - "traefik.http.routers.${TRAEFIK_QUERY_ROUTER:-mblast-query-dev}.middlewares=strip-query@docker"
    - "traefik.http.routers.${TRAEFIK_QUERY_ROUTER:-mblast-query-dev}.entrypoints=${TRAEFIK_ENTRYPOINTS:-local}"
    - "traefik.docker.network=traefik"

  report-service:
    image: veupathdb/mblast-report-service:${MBLAST_REPORT_SERVICE_TAG:-latest}
    depends_on:
    - queue
    - queue-db
    - query-service
    volumes:
    - type: bind
      source: ${BLAST_DB_MOUNT_SOURCE:-../blastdb}
      target: ${BLAST_DB_MOUNT_TARGET:-/blastdb}
    # because the ncbi/blast container is based on gcloud-sdk it creates a
    # volume in /root/.confg.  We don't care about this, we configure a
    # volume so that it is at least tied to the project, instead of a hash.
    - type: volume
      source: gcloud-config
      target: /root/.config
      read_only: true
    environment:
      JVM_MEM_ARGS: ${REPORT_SERVICE_JVM_MEM_ARGS:--Xms32M -Xmx256M}
      JVM_ARGS:     ${REPORT_SERVICE_JVM_ARGS:-}

      AUTH_SECRET_KEY: ${AUTH_SECRET_KEY:?}
      ADMIN_AUTH_KEY: ${ADMIN_AUTH_KEY:?}
      LDAP_SERVER:     ${LDAP_SERVERS:?}
      ORACLE_BASE_DN:  ${ORACLE_BASE_DN:?}

      SERVER_PORT: ${QUERY_SERVER_PORT:-80}

      ACCT_DB_TNS_NAME:  ${ACCT_DB_TNS_NAME:?}
      ACCT_DB_USER:      ${ACCT_DB_USER:?}
      ACCT_DB_PASS:      ${ACCT_DB_PASS:?}
      ACCT_DB_POOL_SIZE: ${ACCT_DB_POOL_SIZE:-5}

      USER_DB_TNS_NAME:  ${USER_DB_TNS_NAME:?}
      USER_DB_USER:      ${USER_DB_USER:?}
      USER_DB_PASS:      ${USER_DB_PASS:?}
      USER_DB_POOL_SIZE: ${USER_DB_POOL_SIZE:-5}

      QUEUE_DB_HOST:      queue-db
      QUEUE_DB_NAME:      ${REPORT_SERVICE_PG_DB_NAME:?}
      QUEUE_DB_PORT:      ${POSTGRES_PORT:-5432}
      QUEUE_DB_USERNAME:  ${REPORT_SERVICE_PG_USER:?}
      QUEUE_DB_PASSWORD:  ${REPORT_SERVICE_PG_PASS:?}
      QUEUE_DB_POOL_SIZE: ${REPORT_SERVICE_PG_POOL_SIZE:-10}

      JOB_QUEUE_HOST:     queue
      JOB_QUEUE_USERNAME: ${RABBITMQ_ROOT_USER:?}
      JOB_QUEUE_PASSWORD: ${RABBITMQ_ROOT_PASS:?}
      JOB_QUEUE_PORT:     ${RABBITMQ_PORT:-5672}

      S3_HOST:         ${S3_HOST:?}
      S3_BUCKET:       ${REPORT_SERVICE_S3_BUCKET:?}
      S3_ACCESS_TOKEN: ${S3_ACCESS_TOKEN:?}
      S3_SECRET_KEY:   ${S3_SECRET_KEY:?}
      S3_PORT:         ${S3_PORT:-9000}
      S3_USE_HTTPS:    ${S3_USE_HTTPS:-false}

      JOB_CACHE_TIMEOUT_DAYS: ${JOB_CACHE_TIMEOUT_DAYS:-30}

      JOB_QUEUE_WORKERS:  ${REPORT_SERVICE_QUEUE_POOL_SIZE:-5}
      JOB_QUEUE_NAME:     ${REPORT_SERVICE_QUEUE_NAME:-report-jobs}
    networks:
    - internal
    - traefik
    - monitoring-ext
    labels:
    - "prometheus.scrape_enabled=true"
    - "com.centurylinklabs.watchtower.enable=${REPORT_SERVICE_WATCHTOWER:-false}"
    - "traefik.http.services.${TRAEFIK_REPORT_ROUTER:-mblast-report-dev}.loadbalancer.server.port=${REPORT_SERVER_PORT:-80}"
    - "traefik.http.routers.${TRAEFIK_REPORT_ROUTER:-mblast-report-dev}.rule=Host(`${TRAEFIK_MBLAST_HOST:-mblast.local.apidb.org}`) && PathPrefix(`/report`)"
    - "traefik.http.middlewares.strip-report.stripprefix.prefixes=/report"
    - "traefik.http.routers.${TRAEFIK_REPORT_ROUTER:-mblast-report-dev}.middlewares=strip-report@docker"
    - "traefik.http.routers.${TRAEFIK_REPORT_ROUTER:-mblast-report-dev}.tls=${TRAEFIK_USE_TLS:-true}"
    - "traefik.http.routers.${TRAEFIK_REPORT_ROUTER:-mblast-report-dev}.entrypoints=${TRAEFIK_ENTRYPOINTS:-local}"
    - "traefik.docker.network=traefik"
