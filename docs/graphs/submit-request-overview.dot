digraph {
  graph [nodesep=1.2, ranksep=1, splines=ortho]
  node  [margin=0, shape=rect, width=1.3]
  edge  [color=darkblue]


  //
  // Nodes
  //

  // Boundaries
  {
    node [shape=oval]

    Start [label=<POST<br align="right" /><font face="monospace">/jobs</font>>, color=blue]
    200   [color=green]
    400   [color=orange]
    401   [color=orange]
    422   [color=orange]
  }

  // Predefined processes
  {
    node [shape=record]

    ValidateRequest  [label="|Validate\nRequest|"]
    ValidateQuery    [label="|Validate\nQuery|"]
    ValidateMaxSize  [label="|Validate\nMax Size|"]
    ValidateTargOrgs [label="|Validate\nTarget\nOrganisms|"]
    Processing       [label="|Blast Job\nProcessing|"]
  }

  TranslateConfig [label="Translate\nJSON config"]
  ValidationSvc   [label="Config\nValidation\nService", shape=component, color=purple]
  ValidateConfig  [label="Validate config"]

  //
  // Edges
  //

  Start              -> ValidateRequest

  400                -> ValidateRequest [taillabel="JSON Error\l", color=red, dir=back]
  ValidateRequest    -> 401             [taillabel="Auth Error", color=red]
  ValidateRequest    -> ValidateQuery

  ValidateQuery      -> 422 [taillabel="Validation Error", color=red, constraint=false]
  ValidateQuery      -> ValidateMaxSize

  ValidateMaxSize    -> 422 [taillabel="Validation Error\l", color=red]
  ValidateMaxSize    -> ValidateTargOrgs

  ValidateTargOrgs   -> 422 [taillabel="Validation Error", color=red, constraint=false]
  ValidateTargOrgs   -> TranslateConfig

  TranslateConfig    -> ValidateConfig

  ValidateConfig     -> ValidationSvc    [style=dotted, color="#333333", dir=both]
  ValidateConfig     -> Processing

  Processing         -> 200


  //
  // Formatting
  //

  {
    graph [rank=same]
    ValidateConfig
    ValidationSvc
  }

  { graph [rank=same]; 400; ValidateRequest; 401 }
  { graph [rank=same]; ValidateMaxSize; 422 }

  // Placement Nodes
  {
    node [shape=none, label=""]
    L1
    R1
  }
  {
    edge [style=invis]
    L1 -> Start -> R1
    L1 -> 400
    R1 -> 401
  }

  {
    graph [rank=same]
    Start
    L1
    R1
  }
}