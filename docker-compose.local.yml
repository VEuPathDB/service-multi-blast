version: "3.5"

services:
  # #
  # Public facing REST API
  # #
  service:
    build:
      dockerfile: Dockerfile
      context: ./rest-service
    # These values can be provided using the .env template file
    ports:
    - '8080:80'
    environment:
      AUTH_SECRET_KEY: ${AUTH_SECRET_KEY:?}
      SERVER_PORT: ${SERVER_PORT:-80}
      LDAP_SERVER: ${LDAP_SERVER:?}
      ORACLE_BASE_DN: ${ORACLE_BASE_DN:?}

      # Account Database
      ACCT_DB_TNS_NAME: ${ACCT_DB_TNS_NAME:?}
      ACCT_DB_USER: ${ACCT_DB_USER:?}
      ACCT_DB_PASS: ${ACCT_DB_PASS:?}

      # User Database
      USER_DB_TNS_NAME: ${USER_DB_TNS_NAME:?}
      USER_DB_USER: ${USER_DB_USER:?}
      USER_DB_PASS: ${USER_DB_PASS:?}

      # Queue Connection
      QUEUE_HOST: ${QUEUE_HOST:-queue}

      # Misc Config
      DB_MOUNT_PATH: ${DB_MOUNT_PATH:?}
      JOB_MOUNT_PATH: ${JOB_MOUNT_PATH:?}
      DB_BUILD: ${DB_BUILD:?}
      BLAST_HOST: ${BLAST_HOST:-blast}
      BLAST_QUEUE_NAME: ${BLAST_QUEUE_NAME:-blast}
      BLAST_JOB_CATEGORY: ${BLAST_JOB_CATEGORY:-blast}

      # OrthoMCL & DIAMOND
      ORTHO_BUILD: ${ORTHO_BUILD:?}
      ORTHO_DB_NAME: ${ORTHO_DB_NAME:?}

      FORMATTER_HOST: ${FORMATTER_HOST:-formatter}
      FORMAT_QUEUE_NAME: ${FORMAT_QUEUE_NAME:-format}
      FORMAT_JOB_CATEGORY: ${FORMAT_JOB_CATEGORY:-format}

      VALIDATOR_HOST: ${VALIDATOR_HOST:-validator}

      # JVM Config
      XMX: ${SERVICE_XMX:-256M}
      XMS: ${SERVICE_XMS:-64M}

      # Job Config
      #
      # These options configure the validation/management of jobs.
      JOB_TIMEOUT: ${JOB_TIMEOUT:-5} #days
      MAX_QUERIES_PER_REQUEST: ${MAX_QUERIES_PER_REQUEST:-100}
      MAX_RESULTS_PER_QUERY: ${MAX_RESULTS_PER_QUERY:-10000}
      MAX_INPUT_QUERY_SIZE: ${MAX_INPUT_QUERY_SIZE:-3145728} # 3MiB
      MAX_NA_SEQ_SIZE: ${MAX_NA_SEQ_SIZE:-1048576} # 1MiB
      MAX_AA_SEQ_SIZE: ${MAX_AA_SEQ_SIZE:-102400} # 100KiB

    volumes:
      # Replace `source` with the path you would like the job workspace to
      # reside in your development environment.
      - type: bind # volume
        source: ${LOCAL_HOST_WORKSPACE_MOUNT_PATH:?} # job-data
        target: ${JOB_MOUNT_PATH:?}
        # Replace `source` with the path to the blast db files available in your
        # work environment.
      - type: bind # volume
        source: ${LOCAL_HOST_DB_MOUNT_PATH:?} # blast-data
        target: ${DB_MOUNT_PATH:?}
    networks:
    - traefik
    - monitoring-ext
    - internal
    depends_on:
      - queue
      - validator

  # #
  # Blast Query Runner (Job Queue Managed)
  # #
  blast:
    build:
      dockerfile: Dockerfile
      context: ./blast/querier
    environment:
      DB_MOUNT_PATH: ${DB_MOUNT_PATH:?}
      JOB_MOUNT_PATH: ${JOB_MOUNT_PATH:?}
    networks:
    - internal
    ports:
    - '8081:80'
    volumes:
      # Replace `source` with the path you would like the job workspace to
      # reside in your development environment.
      - type: bind # volume
        source: ${LOCAL_HOST_WORKSPACE_MOUNT_PATH:?} # job-data
        target: ${JOB_MOUNT_PATH:?}
        # Replace `source` with the path to the blast db files available in your
        # work environment.
      - type: bind # volume
        source: ${LOCAL_HOST_DB_MOUNT_PATH:?} # blast-data
        target: ${DB_MOUNT_PATH:?}

  # #
  # Blast Result Formatter
  # #
  formatter:
    build:
      dockerfile: Dockerfile
      context: ./blast/formatter
    environment:
      DB_MOUNT_PATH: ${DB_MOUNT_PATH:?}
      JOB_MOUNT_PATH: ${JOB_MOUNT_PATH:?}
    networks:
    - internal
    ports:
    - '8082:80'
    volumes:
      - type: bind # volume
        source: ${LOCAL_HOST_WORKSPACE_MOUNT_PATH:?} # job-data
        target: ${JOB_MOUNT_PATH:?}
      - type: bind # volume
        source: ${LOCAL_HOST_DB_MOUNT_PATH:?} # blast-data
        target: ${DB_MOUNT_PATH:?}

  # #
  # MySQL backing database queue persistence
  # #
  queue-db:
    build:
      dockerfile: Dockerfile
      context: ./databases/queue
    networks:
    - internal
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:?}
      QUEUE_DB_USER: ${QUEUE_DB_USER:-queue}
      QUEUE_DB_PASS: ${QUEUE_DB_PASS:?}

  # #
  # Job Queue
  # #
  queue:
    build:
      context: ./fireworq
    environment:
      # REQUIRED!
      # Specifies a data source name for the job queue and the repository
      # database in a form user:password@tcp(mysql_host:mysql_port)/database?options
      #
      # The password value here must match the `MYSQL_PASSWORD` value for
      # the queue-db container.
      FIREWORQ_MYSQL_DSN: queue:${QUEUE_DB_PASS:?}@tcp(queue-db:3306)/queue

      # Configures the number of simultaneous blast jobs that can be run
      FIREWORQ_QUEUE_DEFAULT_MAX_WORKERS: ${FIREWORQ_QUEUE_DEFAULT_MAX_WORKERS:-2}

      FIREWORQ_BIND: ${FIREWORQ_BIND:-0.0.0.0:80}
      FIREWORQ_DRIVER: ${FIREWORQ_DRIVER:-mysql}

      JOB_CATEGORY: blast
    networks:
    - internal
    ports:
    - '8083:80'
    depends_on:
      - queue-db
      - blast
      - formatter

  ##
  # Blast config validator
  ##
  validator:
    build:
      context: ./blast/validator
    networks:
    - internal
    ports:
    - '8084:80'

networks:
  internal:
    internal: true
  traefik:
    external: true
  monitoring-ext:
    external: true

volumes:
  blast-data:

  job-data:
